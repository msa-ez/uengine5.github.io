{"hash":"7d59889b48a96bc3d837dbcc319a42bb1ffa5b5f","data":{"markdownPage":{"id":"cf033ad26917ae9b21d767273577c2e4","title":"uEngine6 트랜잭션 리스너","description":"","path":"/api-customizing/transaction-listener/","timeToRead":2,"content":"<h1 id=\"uengine6-트랜잭션-리스너\"><a href=\"#uengine6-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EB%A6%AC%EC%8A%A4%EB%84%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>uEngine6 트랜잭션 리스너</h1>\n<p>Main interface of ProcessTransactionListener is as follows:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>uengine<span class=\"token punctuation\">.</span>five</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProcessTransactionListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">beforeCommit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessTransactionContext</span> tx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">beforeRollback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessTransactionContext</span> tx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessTransactionContext</span> tx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">afterRollback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessTransactionContext</span> tx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>하나의 트랜잭션 내에 여러개의 메인과 서브 프로세스 인스턴스, 그리고 심지어 멀티플 인스턴스가 생성되었다가 한번에 저장되어야 하기 때문에, 액티비티들을 실행하면서 발생하는 모든 프로세스 인스턴스의 상태나 프로세스 변수의 값을 JPA Repository 를 통하여 매번 읽고 쓰고가 생길때마다 SQL 을 DB 로 전송했다가는 성능 저하가 심각하게 발생하여 uEngine 은 전통적으로 DAO 에 대한 Caching 프레임워크를 자체적으로 개발하여 사용하고 있었다.</p>\n<p>uEngine6 에서는 대대적으로 기존 자체 기술을 Spring 기반의 가능한 표준 기술로 대체하기로 한바, JPA 기반으로 기존 동작을 구현하기로 하였다.</p>\n<p>해서 하나의 Request 에 유일한 완료시점에 변경된 프로세스 인스턴스들만 마지막 상태값을 저장할 수 있어야 한다.</p>\n<p>저자가 Spring 을 잘 몰라서 그런지 여러방법 (Application Event 등) 들을 써봤으나, 제대로 한번만 호출이 안되는 관계로, 결국 서비스단에서 다음과 같이 애노테이션을 주면, 이를 advice 가 걸러내어 시작시점과 완료시점에 수정된 인스턴스들만 걸러내어 저장 시켜주는 프레임워크를 만들게 되었다:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/work-item/{taskId}\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token annotation punctuation\">@ProcessTransactional</span> <span class=\"token comment\">//important!</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">putWorkItem</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taskId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> taskId<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">WorkItem</span> workItem<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n<p>결론적으로, 기존에 트랜잭션을 걸기위해서 스프링에서 @Transactional 을 선언한다고 하면, 거기에 보태어 @ProcessTransactional 하나만 더 선언해주기만 하면 된다. 위와 같이 선언해주면, 다음의 Advice 가 등록된 TransactionListener 들 각자에 beforeCommit, beforeRollback 을 콜백받을 기회를 주게된다:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>uengine<span class=\"token punctuation\">.</span>five</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProcessTransactionAdvice</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.uengine.five.ProcessTransactional)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initiateTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start tx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessTransactionContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.uengine.five.ProcessTransactional)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commitTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ProcessTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadLocalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.uengine.five.ProcessTransactional)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rollbackTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rollback\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ProcessTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadLocalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>JPAProcessInstance 는 자기 자신이 생성되는 순간, ThreadLocal 객체로 존재하는 ProcessTransactionContext 에 자신을 등록하고, beforeCommit() 에서 자신을 최종으로 한번만 저장하는 로직을 응집도 있게 구현하고 있다:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>uengine<span class=\"token punctuation\">.</span>five</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JPAProcessInstance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultProcessInstance</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ProcessTransactionListener</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// JPAProcessInstance 는 ProcessTransactionListener 이다.</span>\n\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JPAProcessInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessDefinition</span> procDefinition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> instanceId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span> options<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>procDefinition<span class=\"token punctuation\">,</span> instanceId<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token comment\">//Add this instance as transaction listener and register this so that it can be cached.</span>\n        <span class=\"token comment\">// JPAProcessInstance 가 어떻게든 생성되면, 자신을 ProcessTransactionContext 에 등록한다.</span>\n        <span class=\"token class-name\">ProcessTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadLocalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addTransactionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ProcessTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadLocalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerProcessInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">//   자신이 커밋되기 직전에 자신의 수정된 사항들을 한번에 저장한다. 파일과 DB 를 저장하고 있다.</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeCommit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessTransactionContext</span> tx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        processInstanceRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">getProcessInstanceEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">IResource</span> resource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"instances/\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getInstanceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        resourceManager<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token function\">getVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"사용-확장\"><a href=\"#%EC%82%AC%EC%9A%A9-%ED%99%95%EC%9E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용 확장</h2>\n<p>만약, JPAProcessInstance 와 같이 애플리케이션 로직에서 구현한 것들도 한번에 이벤트를 받아 캐시된 정보를 최종적으로 한번만 저장해야 하는 필요성이 있다면 아래와 같이 구현하면 될 것이다:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">executeActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token class-name\">ProcessTransactionContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadLocalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addTransactionListener</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessTransactionListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                  <span class=\"token function\">flushSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n              <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","sidebar":"getting-started","next":"","prev":"","headings":[{"depth":1,"value":"uEngine6 트랜잭션 리스너","anchor":"#uengine6-트랜잭션-리스너"},{"depth":2,"value":"사용 확장","anchor":"#사용-확장"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/process-gpt/user-guide/","title":"일반 기능"}},{"node":{"path":"/process-gpt/","title":"Process-GPT"}},{"node":{"path":"/process-gpt/ai-chat-guide/","title":"AI 기반 음성 채팅"}},{"node":{"path":"/process-gpt/admin-guide/","title":"관리자 기능 - 정의 관리"}},{"node":{"path":"/process-example/","title":"여신관리 프로세스"}},{"node":{"path":"/process-example/sub-process/","title":"서브 프로세스를 활용한 프로세스 작성"}},{"node":{"path":"/process-example/call-activity/","title":"콜 액티비티(Call Activity)의 활용"}},{"node":{"path":"/pal-edition/process-definition-map/","title":"프로세스 정의 체계도 작성 방법"}},{"node":{"path":"/pal-edition/save-image/","title":"프로세스 정의 PDF 저장 방법"}},{"node":{"path":"/pal-edition/process-definition-edit/","title":"프로세스 편집"}},{"node":{"path":"/getting-started/soa-architecture/","title":"SOA (MSA) 아키텍처 예제"}},{"node":{"path":"/pal-edition/phase/","title":"페이즈(Phase)란?"}},{"node":{"path":"/pal-edition/index2/","title":"BPMN PAL 매뉴얼"}},{"node":{"path":"/pal-edition/","title":"PAL 개요 및 목적"}},{"node":{"path":"/getting-started/soa-architecture-event/","title":"SOA (MSA) 아키텍처 예제 - Event"}},{"node":{"path":"/getting-started/soa-architecture-message/","title":"SOA (MSA) 아키텍처 예제 - Message"}},{"node":{"path":"/getting-started/process-workflow/","title":"사람간의 프로세스 Workflow"}},{"node":{"path":"/getting-started/process-monitoring/","title":"프로세스 실행"}},{"node":{"path":"/getting-started/process-definition/","title":""}},{"node":{"path":"/getting-started/multiple-instance/","title":"멀티플 인스턴스"}},{"node":{"path":"/getting-started/modeling-tools/","title":"모델링 툴의 사용법"}},{"node":{"path":"/getting-started/form-mapping/","title":"폼 매핑"}},{"node":{"path":"/getting-started/","title":"실행환경 구성"}},{"node":{"path":"/getting-started/form-definition/","title":"폼 관리"}},{"node":{"path":"/getting-started/database-table/","title":"테이블 정의"}},{"node":{"path":"/bpm6-started/script-task/","title":"[Modeling] ScriptTask"}},{"node":{"path":"/getting-started/conditional-branch/","title":"조건 분기 처리"}},{"node":{"path":"/bpm6-started/multiple-instance/","title":"멀티플 인스턴스"}},{"node":{"path":"/bpm6-started/","title":"모델링 툴의 사용법"}},{"node":{"path":"/bpm6-started/form-mapping/","title":"데이터 매핑"}},{"node":{"path":"/bpm6-started/form-definition/","title":"폼 관리"}},{"node":{"path":"/bpm6-started/conditional-branch/","title":"조건 분기 처리"}},{"node":{"path":"/bpm6-started/bpm6-external/","title":"외부 서비스 연동"}},{"node":{"path":"/bpm6-intro/example-video/","title":"기능 데모 영상"}},{"node":{"path":"/bpm6-started/bpm6-modeling/","title":"구성요소"}},{"node":{"path":"/bpm6-intro/","title":"소개하기"}},{"node":{"path":"/bpm6-started/bpm6-execution/","title":"프로세스 실행"}},{"node":{"path":"/bpm6-intro/business-process/","title":"BPM과 비즈니스 프로세스"}},{"node":{"path":"/bpm6-intro/bpm6-timer/","title":"타이머 이벤트"}},{"node":{"path":"/bpm6-intro/bpm6-introduce/","title":"소개하기"}},{"node":{"path":"/bpm6-intro/bpm6-animation/","title":"프로세스 애니메이션"}},{"node":{"path":"/bpm6-install/","title":"설치 가이드"}},{"node":{"path":"/bpm6-deploy-config/uengine3-migration/","title":"uEngine3.x 마이그레이션"}},{"node":{"path":"/bpm6-install/bpm6-account/","title":"계정 관리 및 접속 방법"}},{"node":{"path":"/bpm6-deploy-config/bpm6-system-integration/","title":"uEngine6 BPM 배포 설정"}},{"node":{"path":"/bpm6-deploy-config/","title":"배포하기"}},{"node":{"path":"/bpm6-contact/","title":"라이센스 및 문의하기"}},{"node":{"path":"/bpm6-api/","title":"API Reference"}},{"node":{"path":"/bpm6-api/bpm6-transaction-listener/","title":"uEngine6 트랜잭션 리스너"}},{"node":{"path":"/bpm6-api/bpm6-message-listener/","title":"Message Listener API"}},{"node":{"path":"/bpm6-admin/","title":"관리자 페이지 기능 및 소개"}},{"node":{"path":"/bpm6-admin/bpm6-file/","title":"데이터 관리 - 파일"}},{"node":{"path":"/bpm6-admin/bpm6-admin-instance/","title":"인스턴스 관리기능"}},{"node":{"path":"/bpm6-admin/bpm6-database/","title":"데이터 관리 - 데이터베이스"}},{"node":{"path":"/bpm-engine/resource-manager/","title":"Resource Manager"}},{"node":{"path":"/bpm-engine/instance/","title":"Instance"}},{"node":{"path":"/bpm-engine/introduction/","title":"기본 소개"}},{"node":{"path":"/bpm-engine/execution/","title":"실행하기"}},{"node":{"path":"/bpm-engine/definition/","title":"Definition"}},{"node":{"path":"/bpm-engine/activity/","title":"Activity"}},{"node":{"path":"/bpm-concept/workflow/","title":"워크플로우"}},{"node":{"path":"/bpm-concept/workflow-management-system/","title":"워크플로우 관리 시스템과 RTE BPM"}},{"node":{"path":"/bpm-concept/example-video/","title":"Example Video"}},{"node":{"path":"/bpm-concept/open-source/","title":"오픈소스 BPMS uEngine 소개"}},{"node":{"path":"/bpm-concept/facebook/","title":"Facebook group"}},{"node":{"path":"/bpm-concept/business-process/","title":"비즈니스 프로세스와 BPM"}},{"node":{"path":"/api-customizing/transaction-listener/","title":"uEngine6 트랜잭션 리스너"}},{"node":{"path":"/api-customizing/script-task/","title":"ScriptTask"}},{"node":{"path":"/api-customizing/message-listener/","title":"[API] Message Listener API"}},{"node":{"path":"/api-customizing/new-activity/","title":"새로운 액티비티 타입 만들기"}},{"node":{"path":"/api-customizing/migration/","title":"uEngine3.x 마이그래이션"}},{"node":{"path":"/api-customizing/external-service/","title":"애플리케이션과 BPM 연동(비동기 방식)"}},{"node":{"path":"/api-customizing/create-project/","title":"uEngine6 기반 프로젝트 만들기"}},{"node":{"path":"/api-customizing/bpm-to-service/","title":"BPM에서 외부 서비스 연동 "}},{"node":{"path":"/api-customizing/api-reference/","title":"uEngine6 API Reference"}},{"node":{"path":"/api-customizing/api-reference-old/","title":"uEngine6 API Reference"}},{"node":{"path":"/ai-generating/","title":"AI를 활용한 프로세스 생성 기능 소개"}},{"node":{"path":"/ai-generating/process-definition/","title":"프로세스 정의 가이드"}},{"node":{"path":"/ai-generating/form-definition/","title":"폼 정의 가이드"}}]}},"context":{}}