{"hash":"c3da066e79b5cda0c4fe905a067c384f8d26467e","data":{"markdownPage":{"id":"e220315613a6e04f13e4c666b5ccdc1b","title":"Instance","description":"","path":"/bpm-engine/instance/","timeToRead":6,"content":"<h1 id=\"instance\"><a href=\"#instance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Instance</h1>\n<h2 id=\"process-instance\"><a href=\"#process-instance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Process Instance</h2>\n<h3 id=\"1-관계\"><a href=\"#1-%EA%B4%80%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 관계</h3>\n<ul>\n<li>ProcessInstance: Process 관련 인터페이스.</li>\n<li>ProcessInstanceImpl: ProcessInstance 인터페이스를 구현하는 구체적인 클래스. </li>\n<li>AbstractProcessInstance: ProcessInstance를 생성하고 관리하는 데 사용되는 추상 클래스 또는 베이스 클래스.</li>\n</ul>\n<p> 하단의 다이어그램은 AbstractProcessInstance를 통해 프로세스 인스턴스의 생성과 관리를 어떻게 추상화하고, ProcessInstance 인터페이스를 통해 다양한 프로세스 인스턴스의 동작을 일관되게 정의하는지 보여줍니다. ProcessInstanceImpl 클래스는 이 인터페이스를 구현하여 실제 로직을 제공합니다. 이러한 설계는 유연성과 확장성을 제공하며, 다양한 유형의 프로세스 인스턴스를 쉽게 지원할 수 있게 해줍니다.</p>\n<p><img src=\"https://github.com/sooheon45/topping-github-action/assets/54785805/cf7265a8-3c42-4c91-a0df-8788f96ae586\" alt=\"스크린샷 2024-04-02 오후 4 08 42\"></p>\n<h3 id=\"2-processinstance\"><a href=\"#2-processinstance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. ProcessInstance</h3>\n<p>ProcessInstance 인터페이스는 비즈니스 프로세스의 실행 인스턴스를 추상화하여 정의합니다.\n이 인터페이스는 프로세스의 상태 관리, 변수 및 속성 관리, 역할 매핑, 이벤트 처리 등 프로세스 인스턴스의 핵심 기능을 제공합니다.\n다음은 ProcessInstance 인터페이스의 주요 기능과 사용 예시입니다.</p>\n<p>예시)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 프로세스 인스턴스 생성 및 초기화</span>\n<span class=\"token class-name\">ProcessInstance</span> myProcessInstance <span class=\"token operator\">=</span> processInstanceFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createProcessInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyProcessInstance<span class=\"token punctuation\">.</span><span class=\"token function\">setInstanceId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyProcessInstance<span class=\"token punctuation\">.</span><span class=\"token function\">setProcessDefinition</span><span class=\"token punctuation\">(</span>myProcessDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 역할 매핑 추가</span>\n<span class=\"token class-name\">RoleMapping</span> roleMapping <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RoleMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroleMapping<span class=\"token punctuation\">.</span><span class=\"token function\">setRoleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroleMapping<span class=\"token punctuation\">.</span><span class=\"token function\">setEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"manager@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyProcessInstance<span class=\"token punctuation\">.</span><span class=\"token function\">putRoleMapping</span><span class=\"token punctuation\">(</span>roleMapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 변수 설정 및 조회</span>\nmyProcessInstance<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orderNumber\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ORD123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Serializable</span> orderNumber <span class=\"token operator\">=</span> myProcessInstance<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orderNumber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 프로세스 실행</span>\nmyProcessInstance<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ol>\n<li>인스턴스 식별자 관리</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">getInstanceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 현재 프로세스 인스턴스의 식별자를 반환합니다<span class=\"token punctuation\">.</span>\n<span class=\"token function\">setInstanceId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 프로세스 인스턴스에 식별자를 설정합니다<span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"2\">\n<li>프로세스 정의 접근</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">getProcessDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 현재 프로세스 인스턴스에 연결된 프로세스 정의를 반환합니다<span class=\"token punctuation\">.</span>\n<span class=\"token function\">setProcessDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessDefinition</span> value<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 프로세스 인스턴스에 프로세스 정의를 설정합니다<span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"3\">\n<li>역할 매핑 관리</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">getRoleMapping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> roleName<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 지정된 역할 이름에 대한 역할 매핑을 반환합니다<span class=\"token punctuation\">.</span>\n<span class=\"token function\">putRoleMapping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RoleMapping</span> roleMap<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 프로세스 인스턴스에 역할 매핑을 추가합니다<span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"4\">\n<li>변수 및 속성 관리</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tracingTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> val<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 지정된 키에 대한 값을 설정합니다<span class=\"token punctuation\">.</span>\n<span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tracingTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 지정된 키에 대한 값을 반환합니다<span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"5\">\n<li>상태 관리</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tracingTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> status<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 프로세스 인스턴스의 상태를 설정합니다<span class=\"token punctuation\">.</span>\n<span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tracingTag<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 프로세스 인스턴스의 현재 상태를 반환합니다<span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"6\">\n<li>이벤트 및 예외 처리</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">addMessageListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> tracingTag<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 특정 메시지에 대한 리스너를 추가합니다<span class=\"token punctuation\">.</span>\n<span class=\"token function\">fireComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tracingTag<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 프로세스 인스턴스의 완료 이벤트를 발생시킵니다<span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"7\">\n<li>실행 및 활동 관리</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 프로세스 인스턴스를 실행합니다<span class=\"token punctuation\">.</span>\n<span class=\"token function\">getCurrentRunningActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 현재 실행 중인 활동을 반환합니다<span class=\"token punctuation\">.</span></code></pre>\n<h3 id=\"3-processinstanceimpl\"><a href=\"#3-processinstanceimpl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. ProcessInstanceImpl</h3>\n<p> Spring Boot와 uEngine 프레임워크를 사용하여 프로세스 인스턴스 관리를 위한 REST API를 구현한 것입니다.\n이 클래스는 InstanceService 인터페이스를 구현하며, 프로세스 인스턴스의 생성, 중지, 일시 정지, 재개 등의 기능을 제공합니다.\n주요 구성 요소와 기능은 다음과 같습니다</p>\n<p><strong>주요 의존성</strong></p>\n<ol>\n<li>DefinitionServiceUtil, ApplicationContext, WorklistRepository 통해 필요한 서비스와 컨텍스트에 접근합니다.</li>\n<li>ProcessInstanceRepository, ServiceEndpointRepository 등의 JPA 리포지토리를 사용하여 데이터베이스와의 상호작용을 관리합니다.</li>\n</ol>\n<p><strong>주요 API 엔드포인트</strong></p>\n<h4 id=\"프로세스-인스턴스-시작\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%8B%9C%EC%9E%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로세스 인스턴스 시작</h4>\n<ul>\n<li><strong>함수</strong>: <code>start(ProcessExecutionCommand command)</code></li>\n<li><strong>경로</strong>: <code>/instance</code></li>\n<li><strong>메소드</strong>: POST, PUT</li>\n</ul>\n<ol start=\"2\">\n<li>프로세스 인스턴스 중지: POST 요청을 /instance/{instanceId}/stop 엔드포인트로 보내 특정 인스턴스를 중지합니다.</li>\n<li>프로세스 인스턴스 일시 정지 및 재개: 각각 /instance/{instanceId}/suspend와 /instance/{instanceId}/resume 엔드포인트를 통해 일시 정지 및 재개 기능을 제공합니다.</li>\n<li>프로세스 인스턴스 조회: GET 요청을 /instance/{instanceId}로 보내 특정 인스턴스의 상태와 정보를 조회합니다.\n변수 및 역할 매핑 관리: 프로세스 인스턴스의 변수와 역할 매핑을 조회하고 설정하는 엔드포인트(/instance/{instanceId}/variables, /instance/{instanceId}/role-mapping/{roleName} 등)를 제공합니다.</li>\n<li>작업 항목 관리: 작업 항목을 조회하고 업데이트하는 API(/work-item/{taskId})를 통해 사용자 작업의 관리를 지원합니다.</li>\n</ol>\n<p><strong>트랜잭션 관리</strong>\n@Transactional 및 @ProcessTransactional 어노테이션을 사용하여 데이터베이스 트랜잭션의 시작, 커밋, 롤백을 관리합니다. 이는 데이터 일관성을 유지하고, 오류 발생 시 롤백을 통해 데이터를 원래 상태로 복구하는 데 필요합니다.</p>\n<ol>\n<li>예외 처리 방식\nResponseStatusException을 던지는 방식으로 예외 상황을 처리합니다. 예를 들어, 클래스를 찾을 수 없거나 정의를 찾을 수 없는 경우 HttpStatus.INTERNAL_SERVER_ERROR 또는 HttpStatus.NOT_FOUND와 같은 상태 코드와 함께 클라이언트에게 응답합니다.</li>\n<li>보안\nSecurityAwareServletFilter를 통해 사용자 인증 정보를 관리하고, API 호출 시 사용자 ID를 전역 컨텍스트에 설정합니다.\n이 파일은 복잡한 비즈니스 프로세스를 관리하고 실행하기 위한 RESTful API를 제공하는 중요한 컴포넌트입니다. 각 메소드와 엔드포인트는 프로세스 인스턴스의 생명주기를 관리하고, 사용자와 시스템 간의 상호작용을 가능하게 합니다.</li>\n</ol>\n<h3 id=\"4-abstractprocessinstance\"><a href=\"#4-abstractprocessinstance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. AbstractProcessInstance</h3>\n<p> AbstractProcessInstance 클래스는 uEngine BPM 시스템에서 프로세스 인스턴스의 핵심 기능과 속성을 정의하는 중요한 기반 클래스입니다.\n이 클래스를 상속받아 구현하는 하위 클래스는 프로세스 인스턴스의 구체적인 로직과 상태 관리를 담당합니다.\n이러한 구현은 프로세스의 실행 흐름,이벤트 처리, 변수 및 역할 매핑 관리 등 프로세스 인스턴스가 필요로 하는 다양한 기능을 포함할 수 있습니다.AbstractProcessInstance를 상속받는 클래스는 이 추상 클래스에서 정의된 메소드들을 구현함으로써,uEngine BPM 시스템 내에서 프로세스의 실행과 관리를 가능하게 합니다.</p>\n<p><img src=\"https://github.com/sooheon45/topping-github-action/assets/54785805/66363bd4-b6c5-48aa-8b43-fa4097646413\" alt=\"Untitled\"></p>\n<p><strong>주요 특징 및 기능</strong></p>\n<p>1. 인스턴스 식별자 및 기본 속성: 인스턴스 ID, 이름 등의 기본 속성 관리를 위한 추상 메소드(getInstanceId, setInstanceId, getName, setName)를 제공합니다.</p>\n<p>2. 프로세스 정의 접근: 프로세스 인스턴스가 속한 프로세스 정의에 접근하기 위한 메소드1를 포함합니다. 이를 통해 인스턴스는 실행 중인 프로세스의 구조와 설정에 접근할 수 있습니다.</p>\n<p>3. 역할 매핑 및 변수 관리: 프로세스 인스턴스 내에서 역할(Role)과 프로세스 변수(Process Variable)를 관리하기 위한 메소드(getRoleMapping, putRoleMapping, set, get)를 포함합니다.</p>\n<p>4. 상태 관리: 프로세스 인스턴스의 상태(getStatus, setStatus)를 관리하며, 특정 활동의 완료2 또는 오류3를 처리합니다.</p>\n<p>5. 실행 범위 및 트랜잭션 컨텍스트: 실행 범위4와 트랜잭션 컨텍스트5를 관리합니다. 이는 복잡한 프로세스 흐름과 트랜잭션을 처리하는 데 필요합니다.</p>\n<p>6. 이벤트 리스너 관리: 프로세스 인스턴스에서 발생하는 이벤트를 처리하기 위한 리스너(addMessageListener, removeMessageListener)를 등록 및 제거합니다.</p>\n<p>7. 실행 및 상태 조회: 현재 실행 중인 활동(getCurrentRunningActivity, getCurrentRunningActivities)을 조회하고, 특정 조건을 만족하는 활동들을 깊이 우선 탐색6으로 조회합니다.</p>\n<h2 id=\"instance-service-상세-설명\"><a href=\"#instance-service-%EC%83%81%EC%84%B8-%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Instance Service 상세 설명</h2>\n<h3 id=\"1-instanceservice\"><a href=\"#1-instanceservice\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. InstanceService</h3>\n<p>프로세스 인스턴스 관리를 위한 REST API를 정의하는 *인터페이스입니다. Spring Cloud의 Feign 클라이언트를 사용하여 bpm 서비스와 통신합니다.</p>\n<h4 id=\"11-interface-목록\"><a href=\"#11-interface-%EB%AA%A9%EB%A1%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1 interface 목록</h4>\n<h5 id=\"111-인스턴스-시작및-재시작\"><a href=\"#111-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%8B%9C%EC%9E%91%EB%B0%8F-%EC%9E%AC%EC%8B%9C%EC%9E%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.1 인스턴스 시작및 재시작</h5>\n<ul>\n<li><strong>메소드</strong>: <code>start(ProcessExecutionCommand command)</code></li>\n<li><strong>경로</strong>: POST, PUT: <code>/instance</code></li>\n</ul>\n<h5 id=\"112-인스턴스-중지\"><a href=\"#112-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%A4%91%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.2 인스턴스 중지</h5>\n<ul>\n<li><strong>메소드</strong>: <code>stop(String instanceId)</code></li>\n<li><strong>경로</strong>: POST: <code>/instance/{instanceId}/stop</code></li>\n</ul>\n<h5 id=\"113-중지된-프로세스-인스턴스-재개\"><a href=\"#113-%EC%A4%91%EC%A7%80%EB%90%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%9E%AC%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.3 중지된 프로세스 인스턴스 재개</h5>\n<ul>\n<li><strong>메소드</strong>: <code>resume(String instanceId)</code></li>\n<li><strong>경로</strong>: POST: <code>/instance/{instanceId}/resume</code></li>\n</ul>\n<h5 id=\"114-인스턴스의-정보-조회\"><a href=\"#114-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-%EC%A0%95%EB%B3%B4-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.4 인스턴스의 정보 조회</h5>\n<ul>\n<li><strong>메소드</strong>: <code>getInstance(String instanceId)</code></li>\n<li><strong>경로</strong>: GET: <code>/instance/{instanceId}</code></li>\n</ul>\n<h5 id=\"115-지정된-위치-이동\"><a href=\"#115-%EC%A7%80%EC%A0%95%EB%90%9C-%EC%9C%84%EC%B9%98-%EC%9D%B4%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.5 지정된 위치 이동</h5>\n<ul>\n<li><strong>메소드</strong>: <code>backToHere(String instanceId, String tracingTag)</code></li>\n<li><strong>경로</strong>: POST: <code>/instance/{instanceId}/activity/{tracingTag}/backToHere</code></li>\n</ul>\n<h5 id=\"116-메시지-전송\"><a href=\"#116-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%A0%84%EC%86%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.6 메시지 전송</h5>\n<ul>\n<li><strong>메소드</strong>: <code>postMessage(String instanceId, Message message)</code></li>\n<li><strong>경로</strong>: POST: <code>/instance/{instanceId}/messages</code></li>\n</ul>\n<h5 id=\"117-인스턴스의-모든-변수-조회\"><a href=\"#117-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-%EB%AA%A8%EB%93%A0-%EB%B3%80%EC%88%98-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.7 인스턴스의 모든 변수 조회</h5>\n<ul>\n<li><strong>메소드</strong>: <code>getProcessVariables(String instanceId)</code></li>\n<li><strong>경로</strong>: GET: <code>/instance/{instanceId}/variables</code></li>\n</ul>\n<h5 id=\"118-인스턴스의-특정-변수-값-조회\"><a href=\"#118-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-%ED%8A%B9%EC%A0%95-%EB%B3%80%EC%88%98-%EA%B0%92-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.8 인스턴스의 특정 변수 값 조회</h5>\n<ul>\n<li><strong>메소드</strong>: <code>getVariable(String instId, String varName)</code></li>\n<li><strong>경로</strong>: GET: <code>/instance/{instId}/variable/{varName}</code></li>\n</ul>\n<h5 id=\"119-인스턴스의-변수-값-설정\"><a href=\"#119-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-%EB%B3%80%EC%88%98-%EA%B0%92-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.9 인스턴스의 변수 값 설정</h5>\n<ul>\n<li><strong>메소드</strong>: <code>setVariable(String instanceId, String varName, String varValue)</code></li>\n<li><strong>경로</strong>: POST: <code>/instance/{instanceId}/variable/{varName}</code></li>\n</ul>\n<h5 id=\"1110-역할-매핑-정보-조회\"><a href=\"#1110-%EC%97%AD%ED%95%A0-%EB%A7%A4%ED%95%91-%EC%A0%95%EB%B3%B4-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.10 역할 매핑 정보 조회</h5>\n<ul>\n<li><strong>메소드</strong>: <code>getRoleMapping(String instId, String roleName)</code></li>\n<li><strong>경로</strong>: GET: <code>/instance/{instId}/role-mapping/{roleName}</code></li>\n</ul>\n<h5 id=\"1111-역할-매핑-설정\"><a href=\"#1111-%EC%97%AD%ED%95%A0-%EB%A7%A4%ED%95%91-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.11 역할 매핑 설정</h5>\n<ul>\n<li><strong>메소드</strong>: <code>setRoleMapping(String instanceId, String roleName, RoleMapping roleMapping)</code></li>\n<li><strong>경로</strong>: POST: <code>/instance/{instanceId}/role-mapping/{roleName}</code></li>\n</ul>\n<h5 id=\"1112-지정된-작업-항목의-정보-조회\"><a href=\"#1112-%EC%A7%80%EC%A0%95%EB%90%9C-%EC%9E%91%EC%97%85-%ED%95%AD%EB%AA%A9%EC%9D%98-%EC%A0%95%EB%B3%B4-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.12 지정된 작업 항목의 정보 조회</h5>\n<ul>\n<li><strong>메소드</strong>: <code>getWorkItem(String taskId)</code></li>\n<li><strong>경로</strong>: GET: <code>/work-item/{taskId}</code></li>\n</ul>\n<h5 id=\"1113-지정된-작업-항목-업데이트\"><a href=\"#1113-%EC%A7%80%EC%A0%95%EB%90%9C-%EC%9E%91%EC%97%85-%ED%95%AD%EB%AA%A9-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1.13 지정된 작업 항목 업데이트</h5>\n<ul>\n<li><strong>메소드</strong>: <code>putWorkItem(String taskId, WorkItemResource workItem)</code></li>\n<li><strong>경로</strong>: POST: <code>/work-item/{taskId}</code></li>\n</ul>\n<h3 id=\"2-instanceserviceimpl\"><a href=\"#2-instanceserviceimpl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. InstanceServiceImpl</h3>\n<p>InstanceService 인터페이스의 구현체로, 프로세스 인스턴스의 생성, 중지, 재개, 조회 등의 실제 로직을 처리합니다. @Autowired를 통해 다른 서비스와 리포지토리에 접근합니다. 예외 처리, 트랜잭션 관리, JSON 데이터 처리 등의 기능을 포함합니다.</p>\n<h3 id=\"3-processexecutioncommand\"><a href=\"#3-processexecutioncommand\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. ProcessExecutionCommand</h3>\n<p>InstanceService 인터페이스와 InstanceServiceImpl에서 사용하는 데이터 전송 객체(DTO)입니다. 프로세스 실행 명령, 메시지 전송, 작업 항목 정보 등을 담습니다.</p>\n<h3 id=\"4-processinstanceentity\"><a href=\"#4-processinstanceentity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. ProcessInstanceEntity</h3>\n<p>데이터베이스에 저장되는 엔티티 클래스입니다. 프로세스 인스턴스와 작업 목록의 정보를 저장합니다. JPA 어노테이션을 사용하여 데이터베이스 테이블과 매핑됩니다.</p>\n<h3 id=\"5-processinstancerepository\"><a href=\"#5-processinstancerepository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. ProcessInstanceRepository</h3>\n<p>JPA 리포지토리 인터페이스로, 데이터베이스의 프로세스 인스턴스와 작업 목록에 대한 CRUD 연산을 추상화합니다. Spring Data JPA를 사용하여 구현체를 자동으로 생성합니다.</p>\n","sidebar":"getting-started","next":"","prev":"","headings":[{"depth":1,"value":"Instance","anchor":"#instance"},{"depth":2,"value":"Process Instance","anchor":"#process-instance"},{"depth":3,"value":"1. 관계","anchor":"#1-관계"},{"depth":3,"value":"2. ProcessInstance","anchor":"#2-processinstance"},{"depth":3,"value":"3. ProcessInstanceImpl","anchor":"#3-processinstanceimpl"},{"depth":4,"value":"프로세스 인스턴스 시작","anchor":"#프로세스-인스턴스-시작"},{"depth":3,"value":"4. AbstractProcessInstance","anchor":"#4-abstractprocessinstance"},{"depth":2,"value":"Instance Service 상세 설명","anchor":"#instance-service-상세-설명"},{"depth":3,"value":"1. InstanceService","anchor":"#1-instanceservice"},{"depth":4,"value":"1.1 interface 목록","anchor":"#11-interface-목록"},{"depth":5,"value":"1.1.1 인스턴스 시작및 재시작","anchor":"#111-인스턴스-시작및-재시작"},{"depth":5,"value":"1.1.2 인스턴스 중지","anchor":"#112-인스턴스-중지"},{"depth":5,"value":"1.1.3 중지된 프로세스 인스턴스 재개","anchor":"#113-중지된-프로세스-인스턴스-재개"},{"depth":5,"value":"1.1.4 인스턴스의 정보 조회","anchor":"#114-인스턴스의-정보-조회"},{"depth":5,"value":"1.1.5 지정된 위치 이동","anchor":"#115-지정된-위치-이동"},{"depth":5,"value":"1.1.6 메시지 전송","anchor":"#116-메시지-전송"},{"depth":5,"value":"1.1.7 인스턴스의 모든 변수 조회","anchor":"#117-인스턴스의-모든-변수-조회"},{"depth":5,"value":"1.1.8 인스턴스의 특정 변수 값 조회","anchor":"#118-인스턴스의-특정-변수-값-조회"},{"depth":5,"value":"1.1.9 인스턴스의 변수 값 설정","anchor":"#119-인스턴스의-변수-값-설정"},{"depth":5,"value":"1.1.10 역할 매핑 정보 조회","anchor":"#1110-역할-매핑-정보-조회"},{"depth":5,"value":"1.1.11 역할 매핑 설정","anchor":"#1111-역할-매핑-설정"},{"depth":5,"value":"1.1.12 지정된 작업 항목의 정보 조회","anchor":"#1112-지정된-작업-항목의-정보-조회"},{"depth":5,"value":"1.1.13 지정된 작업 항목 업데이트","anchor":"#1113-지정된-작업-항목-업데이트"},{"depth":3,"value":"2. InstanceServiceImpl","anchor":"#2-instanceserviceimpl"},{"depth":3,"value":"3. ProcessExecutionCommand","anchor":"#3-processexecutioncommand"},{"depth":3,"value":"4. ProcessInstanceEntity","anchor":"#4-processinstanceentity"},{"depth":3,"value":"5. ProcessInstanceRepository","anchor":"#5-processinstancerepository"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/getting-started/soa-architecture/","title":"SOA (MSA) 아키텍처 예제"}},{"node":{"path":"/getting-started/process-workflow/","title":"사람간의 프로세스 Workflow"}},{"node":{"path":"/api-customizing/transaction-listener/","title":"uEngine5 트랜잭션 리스너"}},{"node":{"path":"/getting-started/","title":"모델링 툴의 사용법"}},{"node":{"path":"/api-customizing/script-task/","title":"[Modeling] ScriptTask"}},{"node":{"path":"/api-customizing/migration/","title":"uEngine3.x 에서 uEngine5 로의 마이그래이션"}},{"node":{"path":"/api-customizing/new-activity/","title":"새로운 액티비티 타입 만들기"}},{"node":{"path":"/api-customizing/message-listener/","title":"[API] Message Listener API"}},{"node":{"path":"/api-customizing/create-project/","title":"uEngine5 기반 프로젝트 만들기"}},{"node":{"path":"/api-customizing/api-reference/","title":"uEngine5 API Reference"}},{"node":{"path":"/api-customizing/external-service/","title":"외부서비스와 BPM연동"}},{"node":{"path":"/bpm-engine/resource-manager/","title":"Resource Manager"}},{"node":{"path":"/bpm-engine/introduction/","title":"기본 소개"}},{"node":{"path":"/bpm-concept/workflow/","title":"워크플로우"}},{"node":{"path":"/bpm-engine/execution/","title":"실행하기"}},{"node":{"path":"/bpm-engine/instance/","title":"Instance"}},{"node":{"path":"/bpm-engine/definition/","title":"Definition"}},{"node":{"path":"/bpm-engine/activity/","title":"Activity"}},{"node":{"path":"/bpm-concept/business-process/","title":"비즈니스 프로세스와 BPM"}},{"node":{"path":"/bpm-concept/workflow-management-system/","title":"워크플로우 관리 시스템과 RTE BPM"}},{"node":{"path":"/bpm-concept/facebook/","title":"Facebook group"}},{"node":{"path":"/bpm-concept/example-video/","title":"Example Video"}},{"node":{"path":"/bpm-concept/open-source/","title":"오픈소스 BPMS uEngine 소개"}}]}},"context":{}}